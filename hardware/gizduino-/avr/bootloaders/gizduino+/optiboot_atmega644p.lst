
optiboot_atmega644p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  0000fe00  0000fe00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000028  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005f  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002a8  00000000  00000000  000002cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000178  00000000  00000000  00000577  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000413  00000000  00000000  000006ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000b04  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000130  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002d8  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .version      00000002  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY
 10 .debug_ranges 00000078  00000000  00000000  00000f8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000fe00 <main>:
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
    fe00:	11 24       	eor	r1, r1
#ifdef __AVR_ATmega8__
  SP=RAMEND;  // This is done by hardware reset
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    fe02:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    fe04:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart();
    fe06:	81 ff       	sbrs	r24, 1
    fe08:	f0 d0       	rcall	.+480    	; 0xffea <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    fe0a:	85 e0       	ldi	r24, 0x05	; 5
    fe0c:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
    fe10:	82 e0       	ldi	r24, 0x02	; 2
    fe12:	80 93 c0 00 	sts	0x00C0, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    fe16:	88 e1       	ldi	r24, 0x18	; 24
    fe18:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    fe1c:	86 e0       	ldi	r24, 0x06	; 6
    fe1e:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    fe22:	80 e1       	ldi	r24, 0x10	; 16
    fe24:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    fe28:	8e e0       	ldi	r24, 0x0E	; 14
    fe2a:	c9 d0       	rcall	.+402    	; 0xffbe <watchdogConfig>

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    fe2c:	27 9a       	sbi	0x04, 7	; 4
    fe2e:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    fe30:	20 e3       	ldi	r18, 0x30	; 48
    fe32:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    fe34:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    fe36:	30 93 85 00 	sts	0x0085, r19
    fe3a:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
    fe3e:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    fe40:	b0 9b       	sbis	0x16, 0	; 22
    fe42:	fe cf       	rjmp	.-4      	; 0xfe40 <main+0x40>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    fe44:	1f 9a       	sbi	0x03, 7	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fe46:	a8 95       	wdr
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    fe48:	81 50       	subi	r24, 0x01	; 1
    fe4a:	a9 f7       	brne	.-22     	; 0xfe36 <main+0x36>
    fe4c:	cc 24       	eor	r12, r12
    fe4e:	dd 24       	eor	r13, r13
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    fe50:	88 24       	eor	r8, r8
    fe52:	83 94       	inc	r8
        addrPtr += 2;
      } while (--ch);

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    fe54:	b5 e0       	ldi	r27, 0x05	; 5
    fe56:	ab 2e       	mov	r10, r27
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    fe58:	a1 e1       	ldi	r26, 0x11	; 17
    fe5a:	9a 2e       	mov	r9, r26
      do *bufPtr++ = getch();
      while (--length);

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    fe5c:	f3 e0       	ldi	r31, 0x03	; 3
    fe5e:	bf 2e       	mov	r11, r31
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    fe60:	a2 d0       	rcall	.+324    	; 0xffa6 <getch>

    if(ch == STK_GET_PARAMETER) {
    fe62:	81 34       	cpi	r24, 0x41	; 65
    fe64:	61 f4       	brne	.+24     	; 0xfe7e <main+0x7e>
      unsigned char which = getch();
    fe66:	9f d0       	rcall	.+318    	; 0xffa6 <getch>
    fe68:	08 2f       	mov	r16, r24
      verifySpace();
    fe6a:	af d0       	rcall	.+350    	; 0xffca <verifySpace>
      if (which == 0x82) {
    fe6c:	02 38       	cpi	r16, 0x82	; 130
    fe6e:	11 f0       	breq	.+4      	; 0xfe74 <main+0x74>
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
      } else if (which == 0x81) {
    fe70:	01 38       	cpi	r16, 0x81	; 129
    fe72:	11 f4       	brne	.+4      	; 0xfe78 <main+0x78>
	  putch(OPTIBOOT_MAJVER);
    fe74:	84 e0       	ldi	r24, 0x04	; 4
    fe76:	01 c0       	rjmp	.+2      	; 0xfe7a <main+0x7a>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    fe78:	83 e0       	ldi	r24, 0x03	; 3
    fe7a:	8d d0       	rcall	.+282    	; 0xff96 <putch>
    fe7c:	89 c0       	rjmp	.+274    	; 0xff90 <main+0x190>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    fe7e:	82 34       	cpi	r24, 0x42	; 66
    fe80:	11 f4       	brne	.+4      	; 0xfe86 <main+0x86>
      // SET DEVICE is ignored
      getNch(20);
    fe82:	84 e1       	ldi	r24, 0x14	; 20
    fe84:	03 c0       	rjmp	.+6      	; 0xfe8c <main+0x8c>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    fe86:	85 34       	cpi	r24, 0x45	; 69
    fe88:	19 f4       	brne	.+6      	; 0xfe90 <main+0x90>
      // SET DEVICE EXT is ignored
      getNch(5);
    fe8a:	85 e0       	ldi	r24, 0x05	; 5
    fe8c:	a6 d0       	rcall	.+332    	; 0xffda <getNch>
    fe8e:	80 c0       	rjmp	.+256    	; 0xff90 <main+0x190>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    fe90:	85 35       	cpi	r24, 0x55	; 85
    fe92:	79 f4       	brne	.+30     	; 0xfeb2 <main+0xb2>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    fe94:	88 d0       	rcall	.+272    	; 0xffa6 <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    fe96:	e8 2e       	mov	r14, r24
    fe98:	ff 24       	eor	r15, r15
    fe9a:	85 d0       	rcall	.+266    	; 0xffa6 <getch>
    fe9c:	08 2f       	mov	r16, r24
    fe9e:	10 e0       	ldi	r17, 0x00	; 0
    fea0:	10 2f       	mov	r17, r16
    fea2:	00 27       	eor	r16, r16
    fea4:	0e 29       	or	r16, r14
    fea6:	1f 29       	or	r17, r15
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    fea8:	00 0f       	add	r16, r16
    feaa:	11 1f       	adc	r17, r17
      address = newAddress;
      verifySpace();
    feac:	8e d0       	rcall	.+284    	; 0xffca <verifySpace>
    feae:	68 01       	movw	r12, r16
    feb0:	6f c0       	rjmp	.+222    	; 0xff90 <main+0x190>
    }
    else if(ch == STK_UNIVERSAL) {
    feb2:	86 35       	cpi	r24, 0x56	; 86
    feb4:	21 f4       	brne	.+8      	; 0xfebe <main+0xbe>
      // UNIVERSAL command is ignored
      getNch(4);
    feb6:	84 e0       	ldi	r24, 0x04	; 4
    feb8:	90 d0       	rcall	.+288    	; 0xffda <getNch>
      putch(0x00);
    feba:	80 e0       	ldi	r24, 0x00	; 0
    febc:	de cf       	rjmp	.-68     	; 0xfe7a <main+0x7a>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    febe:	84 36       	cpi	r24, 0x64	; 100
    fec0:	09 f0       	breq	.+2      	; 0xfec4 <main+0xc4>
    fec2:	40 c0       	rjmp	.+128    	; 0xff44 <main+0x144>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    fec4:	70 d0       	rcall	.+224    	; 0xffa6 <getch>
      length = getch();
    fec6:	6f d0       	rcall	.+222    	; 0xffa6 <getch>
    fec8:	08 2f       	mov	r16, r24
      getch();
    feca:	6d d0       	rcall	.+218    	; 0xffa6 <getch>

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    fecc:	80 e0       	ldi	r24, 0x00	; 0
    fece:	c8 16       	cp	r12, r24
    fed0:	80 ee       	ldi	r24, 0xE0	; 224
    fed2:	d8 06       	cpc	r13, r24
    fed4:	18 f4       	brcc	.+6      	; 0xfedc <main+0xdc>
    fed6:	f6 01       	movw	r30, r12
    fed8:	b7 be       	out	0x37, r11	; 55
    feda:	e8 95       	spm
    fedc:	c0 e0       	ldi	r28, 0x00	; 0
    fede:	d1 e0       	ldi	r29, 0x01	; 1

      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    fee0:	62 d0       	rcall	.+196    	; 0xffa6 <getch>
    fee2:	89 93       	st	Y+, r24
      while (--length);
    fee4:	0c 17       	cp	r16, r28
    fee6:	e1 f7       	brne	.-8      	; 0xfee0 <main+0xe0>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    fee8:	f0 e0       	ldi	r31, 0x00	; 0
    feea:	cf 16       	cp	r12, r31
    feec:	f0 ee       	ldi	r31, 0xE0	; 224
    feee:	df 06       	cpc	r13, r31
    fef0:	18 f0       	brcs	.+6      	; 0xfef8 <main+0xf8>
    fef2:	f6 01       	movw	r30, r12
    fef4:	b7 be       	out	0x37, r11	; 55
    fef6:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
    fef8:	68 d0       	rcall	.+208    	; 0xffca <verifySpace>

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    fefa:	07 b6       	in	r0, 0x37	; 55
    fefc:	00 fc       	sbrc	r0, 0
    fefe:	fd cf       	rjmp	.-6      	; 0xfefa <main+0xfa>
    ff00:	a6 01       	movw	r20, r12
    ff02:	a0 e0       	ldi	r26, 0x00	; 0
    ff04:	b1 e0       	ldi	r27, 0x01	; 1
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    ff06:	2c 91       	ld	r18, X
    ff08:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    ff0a:	11 96       	adiw	r26, 0x01	; 1
    ff0c:	8c 91       	ld	r24, X
    ff0e:	11 97       	sbiw	r26, 0x01	; 1
    ff10:	90 e0       	ldi	r25, 0x00	; 0
    ff12:	98 2f       	mov	r25, r24
    ff14:	88 27       	eor	r24, r24
    ff16:	82 2b       	or	r24, r18
    ff18:	93 2b       	or	r25, r19
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
    ff1a:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    ff1c:	fa 01       	movw	r30, r20
    ff1e:	0c 01       	movw	r0, r24
    ff20:	87 be       	out	0x37, r8	; 55
    ff22:	e8 95       	spm
    ff24:	11 24       	eor	r1, r1
        addrPtr += 2;
    ff26:	4e 5f       	subi	r20, 0xFE	; 254
    ff28:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
    ff2a:	f2 e0       	ldi	r31, 0x02	; 2
    ff2c:	a0 30       	cpi	r26, 0x00	; 0
    ff2e:	bf 07       	cpc	r27, r31
    ff30:	51 f7       	brne	.-44     	; 0xff06 <main+0x106>

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    ff32:	f6 01       	movw	r30, r12
    ff34:	a7 be       	out	0x37, r10	; 55
    ff36:	e8 95       	spm
      boot_spm_busy_wait();
    ff38:	07 b6       	in	r0, 0x37	; 55
    ff3a:	00 fc       	sbrc	r0, 0
    ff3c:	fd cf       	rjmp	.-6      	; 0xff38 <main+0x138>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    ff3e:	97 be       	out	0x37, r9	; 55
    ff40:	e8 95       	spm
    ff42:	26 c0       	rjmp	.+76     	; 0xff90 <main+0x190>
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    ff44:	84 37       	cpi	r24, 0x74	; 116
    ff46:	b1 f4       	brne	.+44     	; 0xff74 <main+0x174>
      // READ PAGE - we only read flash
      getch();			/* getlen() */
    ff48:	2e d0       	rcall	.+92     	; 0xffa6 <getch>
      length = getch();
    ff4a:	2d d0       	rcall	.+90     	; 0xffa6 <getch>
    ff4c:	f8 2e       	mov	r15, r24
      getch();
    ff4e:	2b d0       	rcall	.+86     	; 0xffa6 <getch>

      verifySpace();
    ff50:	3c d0       	rcall	.+120    	; 0xffca <verifySpace>
    ff52:	f6 01       	movw	r30, r12
    ff54:	ef 2c       	mov	r14, r15
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    ff56:	8f 01       	movw	r16, r30
    ff58:	0f 5f       	subi	r16, 0xFF	; 255
    ff5a:	1f 4f       	sbci	r17, 0xFF	; 255
    ff5c:	84 91       	lpm	r24, Z+
    ff5e:	1b d0       	rcall	.+54     	; 0xff96 <putch>
      while (--length);
    ff60:	ea 94       	dec	r14
    ff62:	f8 01       	movw	r30, r16
    ff64:	c1 f7       	brne	.-16     	; 0xff56 <main+0x156>
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
    ff66:	08 94       	sec
    ff68:	c1 1c       	adc	r12, r1
    ff6a:	d1 1c       	adc	r13, r1
    ff6c:	fa 94       	dec	r15
    ff6e:	cf 0c       	add	r12, r15
    ff70:	d1 1c       	adc	r13, r1
    ff72:	0e c0       	rjmp	.+28     	; 0xff90 <main+0x190>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    ff74:	85 37       	cpi	r24, 0x75	; 117
    ff76:	39 f4       	brne	.+14     	; 0xff86 <main+0x186>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    ff78:	28 d0       	rcall	.+80     	; 0xffca <verifySpace>
      putch(SIGNATURE_0);
    ff7a:	8e e1       	ldi	r24, 0x1E	; 30
    ff7c:	0c d0       	rcall	.+24     	; 0xff96 <putch>
      putch(SIGNATURE_1);
    ff7e:	86 e9       	ldi	r24, 0x96	; 150
    ff80:	0a d0       	rcall	.+20     	; 0xff96 <putch>
      putch(SIGNATURE_2);
    ff82:	8a e0       	ldi	r24, 0x0A	; 10
    ff84:	7a cf       	rjmp	.-268    	; 0xfe7a <main+0x7a>
    }
    else if (ch == 'Q') {
    ff86:	81 35       	cpi	r24, 0x51	; 81
    ff88:	11 f4       	brne	.+4      	; 0xff8e <main+0x18e>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    ff8a:	88 e0       	ldi	r24, 0x08	; 8
    ff8c:	18 d0       	rcall	.+48     	; 0xffbe <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    ff8e:	1d d0       	rcall	.+58     	; 0xffca <verifySpace>
    }
    putch(STK_OK);
    ff90:	80 e1       	ldi	r24, 0x10	; 16
    ff92:	01 d0       	rcall	.+2      	; 0xff96 <putch>
    ff94:	65 cf       	rjmp	.-310    	; 0xfe60 <main+0x60>

0000ff96 <putch>:
  }
}

void putch(char ch) {
    ff96:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    ff98:	80 91 c0 00 	lds	r24, 0x00C0
    ff9c:	85 ff       	sbrs	r24, 5
    ff9e:	fc cf       	rjmp	.-8      	; 0xff98 <putch+0x2>
  UDR0 = ch;
    ffa0:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    ffa4:	08 95       	ret

0000ffa6 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    ffa6:	80 91 c0 00 	lds	r24, 0x00C0
    ffaa:	87 ff       	sbrs	r24, 7
    ffac:	fc cf       	rjmp	.-8      	; 0xffa6 <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
    ffae:	80 91 c0 00 	lds	r24, 0x00C0
    ffb2:	84 fd       	sbrc	r24, 4
    ffb4:	01 c0       	rjmp	.+2      	; 0xffb8 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    ffb6:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
    ffb8:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    ffbc:	08 95       	ret

0000ffbe <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    ffbe:	e0 e6       	ldi	r30, 0x60	; 96
    ffc0:	f0 e0       	ldi	r31, 0x00	; 0
    ffc2:	98 e1       	ldi	r25, 0x18	; 24
    ffc4:	90 83       	st	Z, r25
  WDTCSR = x;
    ffc6:	80 83       	st	Z, r24
}
    ffc8:	08 95       	ret

0000ffca <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    ffca:	ed df       	rcall	.-38     	; 0xffa6 <getch>
    ffcc:	80 32       	cpi	r24, 0x20	; 32
    ffce:	19 f0       	breq	.+6      	; 0xffd6 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    ffd0:	88 e0       	ldi	r24, 0x08	; 8
    ffd2:	f5 df       	rcall	.-22     	; 0xffbe <watchdogConfig>
    ffd4:	ff cf       	rjmp	.-2      	; 0xffd4 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    ffd6:	84 e1       	ldi	r24, 0x14	; 20
}
    ffd8:	de cf       	rjmp	.-68     	; 0xff96 <putch>

0000ffda <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    ffda:	1f 93       	push	r17
    ffdc:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    ffde:	e3 df       	rcall	.-58     	; 0xffa6 <getch>
    ffe0:	11 50       	subi	r17, 0x01	; 1
    ffe2:	e9 f7       	brne	.-6      	; 0xffde <getNch+0x4>
  verifySpace();
    ffe4:	f2 df       	rcall	.-28     	; 0xffca <verifySpace>
}
    ffe6:	1f 91       	pop	r17
    ffe8:	08 95       	ret

0000ffea <appStart>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
  WDTCSR = x;
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    ffea:	80 e0       	ldi	r24, 0x00	; 0
    ffec:	e8 df       	rcall	.-48     	; 0xffbe <watchdogConfig>
  __asm__ __volatile__ (
    ffee:	ee 27       	eor	r30, r30
    fff0:	ff 27       	eor	r31, r31
    fff2:	09 94       	ijmp
