
optiboot_atmega88.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  00001e00  00001e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00001ffe  00001ffe  00000248  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005f  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002a8  00000000  00000000  000002d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000178  00000000  00000000  00000579  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000413  00000000  00000000  000006f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000b04  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000102  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002d8  00000000  00000000  00000c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00000f5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001e00 <main>:
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
    1e00:	11 24       	eor	r1, r1
#ifdef __AVR_ATmega8__
  SP=RAMEND;  // This is done by hardware reset
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    1e02:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    1e04:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart();
    1e06:	81 ff       	sbrs	r24, 1
    1e08:	f0 d0       	rcall	.+480    	; 0x1fea <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    1e0a:	85 e0       	ldi	r24, 0x05	; 5
    1e0c:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
    1e10:	82 e0       	ldi	r24, 0x02	; 2
    1e12:	80 93 c0 00 	sts	0x00C0, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    1e16:	88 e1       	ldi	r24, 0x18	; 24
    1e18:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    1e1c:	86 e0       	ldi	r24, 0x06	; 6
    1e1e:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    1e22:	80 e1       	ldi	r24, 0x10	; 16
    1e24:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    1e28:	8e e0       	ldi	r24, 0x0E	; 14
    1e2a:	c9 d0       	rcall	.+402    	; 0x1fbe <watchdogConfig>

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    1e2c:	25 9a       	sbi	0x04, 5	; 4
    1e2e:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    1e30:	20 e3       	ldi	r18, 0x30	; 48
    1e32:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    1e34:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    1e36:	30 93 85 00 	sts	0x0085, r19
    1e3a:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
    1e3e:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    1e40:	b0 9b       	sbis	0x16, 0	; 22
    1e42:	fe cf       	rjmp	.-4      	; 0x1e40 <main+0x40>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    1e44:	1d 9a       	sbi	0x03, 5	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1e46:	a8 95       	wdr
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    1e48:	81 50       	subi	r24, 0x01	; 1
    1e4a:	a9 f7       	brne	.-22     	; 0x1e36 <main+0x36>
    1e4c:	cc 24       	eor	r12, r12
    1e4e:	dd 24       	eor	r13, r13
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    1e50:	88 24       	eor	r8, r8
    1e52:	83 94       	inc	r8
        addrPtr += 2;
      } while (--ch);

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    1e54:	b5 e0       	ldi	r27, 0x05	; 5
    1e56:	ab 2e       	mov	r10, r27
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    1e58:	a1 e1       	ldi	r26, 0x11	; 17
    1e5a:	9a 2e       	mov	r9, r26
      do *bufPtr++ = getch();
      while (--length);

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    1e5c:	f3 e0       	ldi	r31, 0x03	; 3
    1e5e:	bf 2e       	mov	r11, r31
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    1e60:	a2 d0       	rcall	.+324    	; 0x1fa6 <getch>

    if(ch == STK_GET_PARAMETER) {
    1e62:	81 34       	cpi	r24, 0x41	; 65
    1e64:	61 f4       	brne	.+24     	; 0x1e7e <main+0x7e>
      unsigned char which = getch();
    1e66:	9f d0       	rcall	.+318    	; 0x1fa6 <getch>
    1e68:	08 2f       	mov	r16, r24
      verifySpace();
    1e6a:	af d0       	rcall	.+350    	; 0x1fca <verifySpace>
      if (which == 0x82) {
    1e6c:	02 38       	cpi	r16, 0x82	; 130
    1e6e:	11 f0       	breq	.+4      	; 0x1e74 <main+0x74>
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
      } else if (which == 0x81) {
    1e70:	01 38       	cpi	r16, 0x81	; 129
    1e72:	11 f4       	brne	.+4      	; 0x1e78 <main+0x78>
	  putch(OPTIBOOT_MAJVER);
    1e74:	84 e0       	ldi	r24, 0x04	; 4
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <main+0x7a>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    1e78:	83 e0       	ldi	r24, 0x03	; 3
    1e7a:	8d d0       	rcall	.+282    	; 0x1f96 <putch>
    1e7c:	89 c0       	rjmp	.+274    	; 0x1f90 <main+0x190>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    1e7e:	82 34       	cpi	r24, 0x42	; 66
    1e80:	11 f4       	brne	.+4      	; 0x1e86 <main+0x86>
      // SET DEVICE is ignored
      getNch(20);
    1e82:	84 e1       	ldi	r24, 0x14	; 20
    1e84:	03 c0       	rjmp	.+6      	; 0x1e8c <main+0x8c>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    1e86:	85 34       	cpi	r24, 0x45	; 69
    1e88:	19 f4       	brne	.+6      	; 0x1e90 <main+0x90>
      // SET DEVICE EXT is ignored
      getNch(5);
    1e8a:	85 e0       	ldi	r24, 0x05	; 5
    1e8c:	a6 d0       	rcall	.+332    	; 0x1fda <getNch>
    1e8e:	80 c0       	rjmp	.+256    	; 0x1f90 <main+0x190>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    1e90:	85 35       	cpi	r24, 0x55	; 85
    1e92:	79 f4       	brne	.+30     	; 0x1eb2 <main+0xb2>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    1e94:	88 d0       	rcall	.+272    	; 0x1fa6 <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    1e96:	e8 2e       	mov	r14, r24
    1e98:	ff 24       	eor	r15, r15
    1e9a:	85 d0       	rcall	.+266    	; 0x1fa6 <getch>
    1e9c:	08 2f       	mov	r16, r24
    1e9e:	10 e0       	ldi	r17, 0x00	; 0
    1ea0:	10 2f       	mov	r17, r16
    1ea2:	00 27       	eor	r16, r16
    1ea4:	0e 29       	or	r16, r14
    1ea6:	1f 29       	or	r17, r15
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    1ea8:	00 0f       	add	r16, r16
    1eaa:	11 1f       	adc	r17, r17
      address = newAddress;
      verifySpace();
    1eac:	8e d0       	rcall	.+284    	; 0x1fca <verifySpace>
    1eae:	68 01       	movw	r12, r16
    1eb0:	6f c0       	rjmp	.+222    	; 0x1f90 <main+0x190>
    }
    else if(ch == STK_UNIVERSAL) {
    1eb2:	86 35       	cpi	r24, 0x56	; 86
    1eb4:	21 f4       	brne	.+8      	; 0x1ebe <main+0xbe>
      // UNIVERSAL command is ignored
      getNch(4);
    1eb6:	84 e0       	ldi	r24, 0x04	; 4
    1eb8:	90 d0       	rcall	.+288    	; 0x1fda <getNch>
      putch(0x00);
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	de cf       	rjmp	.-68     	; 0x1e7a <main+0x7a>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    1ebe:	84 36       	cpi	r24, 0x64	; 100
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <main+0xc4>
    1ec2:	40 c0       	rjmp	.+128    	; 0x1f44 <main+0x144>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    1ec4:	70 d0       	rcall	.+224    	; 0x1fa6 <getch>
      length = getch();
    1ec6:	6f d0       	rcall	.+222    	; 0x1fa6 <getch>
    1ec8:	08 2f       	mov	r16, r24
      getch();
    1eca:	6d d0       	rcall	.+218    	; 0x1fa6 <getch>

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	c8 16       	cp	r12, r24
    1ed0:	88 e1       	ldi	r24, 0x18	; 24
    1ed2:	d8 06       	cpc	r13, r24
    1ed4:	18 f4       	brcc	.+6      	; 0x1edc <main+0xdc>
    1ed6:	f6 01       	movw	r30, r12
    1ed8:	b7 be       	out	0x37, r11	; 55
    1eda:	e8 95       	spm
    1edc:	c0 e0       	ldi	r28, 0x00	; 0
    1ede:	d1 e0       	ldi	r29, 0x01	; 1

      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    1ee0:	62 d0       	rcall	.+196    	; 0x1fa6 <getch>
    1ee2:	89 93       	st	Y+, r24
      while (--length);
    1ee4:	0c 17       	cp	r16, r28
    1ee6:	e1 f7       	brne	.-8      	; 0x1ee0 <main+0xe0>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	cf 16       	cp	r12, r31
    1eec:	f8 e1       	ldi	r31, 0x18	; 24
    1eee:	df 06       	cpc	r13, r31
    1ef0:	18 f0       	brcs	.+6      	; 0x1ef8 <main+0xf8>
    1ef2:	f6 01       	movw	r30, r12
    1ef4:	b7 be       	out	0x37, r11	; 55
    1ef6:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
    1ef8:	68 d0       	rcall	.+208    	; 0x1fca <verifySpace>

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    1efa:	07 b6       	in	r0, 0x37	; 55
    1efc:	00 fc       	sbrc	r0, 0
    1efe:	fd cf       	rjmp	.-6      	; 0x1efa <main+0xfa>
    1f00:	a6 01       	movw	r20, r12
    1f02:	a0 e0       	ldi	r26, 0x00	; 0
    1f04:	b1 e0       	ldi	r27, 0x01	; 1
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    1f06:	2c 91       	ld	r18, X
    1f08:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    1f0a:	11 96       	adiw	r26, 0x01	; 1
    1f0c:	8c 91       	ld	r24, X
    1f0e:	11 97       	sbiw	r26, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	98 2f       	mov	r25, r24
    1f14:	88 27       	eor	r24, r24
    1f16:	82 2b       	or	r24, r18
    1f18:	93 2b       	or	r25, r19
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
    1f1a:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    1f1c:	fa 01       	movw	r30, r20
    1f1e:	0c 01       	movw	r0, r24
    1f20:	87 be       	out	0x37, r8	; 55
    1f22:	e8 95       	spm
    1f24:	11 24       	eor	r1, r1
        addrPtr += 2;
    1f26:	4e 5f       	subi	r20, 0xFE	; 254
    1f28:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
    1f2a:	f1 e0       	ldi	r31, 0x01	; 1
    1f2c:	a0 34       	cpi	r26, 0x40	; 64
    1f2e:	bf 07       	cpc	r27, r31
    1f30:	51 f7       	brne	.-44     	; 0x1f06 <main+0x106>

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    1f32:	f6 01       	movw	r30, r12
    1f34:	a7 be       	out	0x37, r10	; 55
    1f36:	e8 95       	spm
      boot_spm_busy_wait();
    1f38:	07 b6       	in	r0, 0x37	; 55
    1f3a:	00 fc       	sbrc	r0, 0
    1f3c:	fd cf       	rjmp	.-6      	; 0x1f38 <main+0x138>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    1f3e:	97 be       	out	0x37, r9	; 55
    1f40:	e8 95       	spm
    1f42:	26 c0       	rjmp	.+76     	; 0x1f90 <main+0x190>
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    1f44:	84 37       	cpi	r24, 0x74	; 116
    1f46:	b1 f4       	brne	.+44     	; 0x1f74 <main+0x174>
      // READ PAGE - we only read flash
      getch();			/* getlen() */
    1f48:	2e d0       	rcall	.+92     	; 0x1fa6 <getch>
      length = getch();
    1f4a:	2d d0       	rcall	.+90     	; 0x1fa6 <getch>
    1f4c:	f8 2e       	mov	r15, r24
      getch();
    1f4e:	2b d0       	rcall	.+86     	; 0x1fa6 <getch>

      verifySpace();
    1f50:	3c d0       	rcall	.+120    	; 0x1fca <verifySpace>
    1f52:	f6 01       	movw	r30, r12
    1f54:	ef 2c       	mov	r14, r15
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    1f56:	8f 01       	movw	r16, r30
    1f58:	0f 5f       	subi	r16, 0xFF	; 255
    1f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5c:	84 91       	lpm	r24, Z+
    1f5e:	1b d0       	rcall	.+54     	; 0x1f96 <putch>
      while (--length);
    1f60:	ea 94       	dec	r14
    1f62:	f8 01       	movw	r30, r16
    1f64:	c1 f7       	brne	.-16     	; 0x1f56 <main+0x156>
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
    1f66:	08 94       	sec
    1f68:	c1 1c       	adc	r12, r1
    1f6a:	d1 1c       	adc	r13, r1
    1f6c:	fa 94       	dec	r15
    1f6e:	cf 0c       	add	r12, r15
    1f70:	d1 1c       	adc	r13, r1
    1f72:	0e c0       	rjmp	.+28     	; 0x1f90 <main+0x190>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    1f74:	85 37       	cpi	r24, 0x75	; 117
    1f76:	39 f4       	brne	.+14     	; 0x1f86 <main+0x186>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    1f78:	28 d0       	rcall	.+80     	; 0x1fca <verifySpace>
      putch(SIGNATURE_0);
    1f7a:	8e e1       	ldi	r24, 0x1E	; 30
    1f7c:	0c d0       	rcall	.+24     	; 0x1f96 <putch>
      putch(SIGNATURE_1);
    1f7e:	83 e9       	ldi	r24, 0x93	; 147
    1f80:	0a d0       	rcall	.+20     	; 0x1f96 <putch>
      putch(SIGNATURE_2);
    1f82:	8a e0       	ldi	r24, 0x0A	; 10
    1f84:	7a cf       	rjmp	.-268    	; 0x1e7a <main+0x7a>
    }
    else if (ch == 'Q') {
    1f86:	81 35       	cpi	r24, 0x51	; 81
    1f88:	11 f4       	brne	.+4      	; 0x1f8e <main+0x18e>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    1f8a:	88 e0       	ldi	r24, 0x08	; 8
    1f8c:	18 d0       	rcall	.+48     	; 0x1fbe <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    1f8e:	1d d0       	rcall	.+58     	; 0x1fca <verifySpace>
    }
    putch(STK_OK);
    1f90:	80 e1       	ldi	r24, 0x10	; 16
    1f92:	01 d0       	rcall	.+2      	; 0x1f96 <putch>
    1f94:	65 cf       	rjmp	.-310    	; 0x1e60 <main+0x60>

00001f96 <putch>:
  }
}

void putch(char ch) {
    1f96:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    1f98:	80 91 c0 00 	lds	r24, 0x00C0
    1f9c:	85 ff       	sbrs	r24, 5
    1f9e:	fc cf       	rjmp	.-8      	; 0x1f98 <putch+0x2>
  UDR0 = ch;
    1fa0:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    1fa4:	08 95       	ret

00001fa6 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    1fa6:	80 91 c0 00 	lds	r24, 0x00C0
    1faa:	87 ff       	sbrs	r24, 7
    1fac:	fc cf       	rjmp	.-8      	; 0x1fa6 <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
    1fae:	80 91 c0 00 	lds	r24, 0x00C0
    1fb2:	84 fd       	sbrc	r24, 4
    1fb4:	01 c0       	rjmp	.+2      	; 0x1fb8 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1fb6:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
    1fb8:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    1fbc:	08 95       	ret

00001fbe <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1fbe:	e0 e6       	ldi	r30, 0x60	; 96
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	98 e1       	ldi	r25, 0x18	; 24
    1fc4:	90 83       	st	Z, r25
  WDTCSR = x;
    1fc6:	80 83       	st	Z, r24
}
    1fc8:	08 95       	ret

00001fca <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1fca:	ed df       	rcall	.-38     	; 0x1fa6 <getch>
    1fcc:	80 32       	cpi	r24, 0x20	; 32
    1fce:	19 f0       	breq	.+6      	; 0x1fd6 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1fd0:	88 e0       	ldi	r24, 0x08	; 8
    1fd2:	f5 df       	rcall	.-22     	; 0x1fbe <watchdogConfig>
    1fd4:	ff cf       	rjmp	.-2      	; 0x1fd4 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    1fd6:	84 e1       	ldi	r24, 0x14	; 20
}
    1fd8:	de cf       	rjmp	.-68     	; 0x1f96 <putch>

00001fda <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    1fda:	1f 93       	push	r17
    1fdc:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    1fde:	e3 df       	rcall	.-58     	; 0x1fa6 <getch>
    1fe0:	11 50       	subi	r17, 0x01	; 1
    1fe2:	e9 f7       	brne	.-6      	; 0x1fde <getNch+0x4>
  verifySpace();
    1fe4:	f2 df       	rcall	.-28     	; 0x1fca <verifySpace>
}
    1fe6:	1f 91       	pop	r17
    1fe8:	08 95       	ret

00001fea <appStart>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
  WDTCSR = x;
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	e8 df       	rcall	.-48     	; 0x1fbe <watchdogConfig>
  __asm__ __volatile__ (
    1fee:	ee 27       	eor	r30, r30
    1ff0:	ff 27       	eor	r31, r31
    1ff2:	09 94       	ijmp
